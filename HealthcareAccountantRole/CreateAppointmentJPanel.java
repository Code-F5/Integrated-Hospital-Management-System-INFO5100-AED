/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HealthcareAccountantRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HealthCenterEnterprise;
import Business.Enterprise.InsuranceCompanyEnterprise;
import Business.Insurance.Insurance;
import Business.InsuranceCustomer.InsuranceCustomer;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientTreatmentWorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Dell
 */
public class CreateAppointmentJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private EcoSystem ecosystem;
    private String patientId;

    /**
     * Creates new form CreateAppointmentJPanel
     */
    CreateAppointmentJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, EcoSystem ecoSystem, String patientId) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.ecosystem = ecoSystem;
        this.patientId = patientId;
        
        populateField();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel14 = new javax.swing.JLabel();
        txtPatientId11 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPatientSSN = new javax.swing.JTextField();
        btnFindPatient = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtSSN = new javax.swing.JTextField();
        txtHomePhone = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        radioBtnMale = new javax.swing.JRadioButton();
        radioBtnFemale = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        radioBtnPatientInsuranceYes = new javax.swing.JRadioButton();
        radioBtnPatientInsuranceNo = new javax.swing.JRadioButton();
        lblHavePolicy = new javax.swing.JLabel();
        lblPolicyName = new javax.swing.JLabel();
        lblInsCompany = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        txtReasonForVisit = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        lblPolicyNum = new javax.swing.JLabel();
        txtPolicyNum = new javax.swing.JTextField();
        btnFindInsurance = new javax.swing.JButton();
        txtInsuranceCompany = new javax.swing.JTextField();
        txtPolicyName = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        lblCoverage = new javax.swing.JLabel();
        txtCoverage = new javax.swing.JTextField();
        radioBtnOther = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        txtPatientIdentifier = new javax.swing.JTextField();
        btnResetPolicyNum = new javax.swing.JButton();
        txtEmail = new javax.swing.JLabel();
        txtPatientEmail = new javax.swing.JTextField();

        jLabel14.setText("Middle Name :");

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("CREATE APPOINTMENT");

        btnBack.setBackground(new java.awt.Color(0, 153, 255));
        btnBack.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel2.setText("Already registered? Provide SSN: ");

        btnFindPatient.setBackground(new java.awt.Color(0, 153, 255));
        btnFindPatient.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        btnFindPatient.setText("Find Patient");
        btnFindPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPatientActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel3.setText("Date:");

        jLabel6.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel6.setText("PATIENT INFORMATION");

        jLabel7.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel7.setText("First Name :");

        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel8.setText("Address:");

        jLabel10.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel10.setText("Last Name :");

        jLabel17.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel17.setText("SSN :");

        txtHomePhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHomePhoneActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel18.setText("Phone Number:");

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel24.setText("Age :");

        jLabel25.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel25.setText("Sex :");

        buttonGroup2.add(radioBtnMale);
        radioBtnMale.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        radioBtnMale.setText("M");
        radioBtnMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnMaleActionPerformed(evt);
            }
        });

        buttonGroup2.add(radioBtnFemale);
        radioBtnFemale.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        radioBtnFemale.setText("F");
        radioBtnFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnFemaleActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel9.setText("INSURANCE INFORMATION");

        buttonGroup1.add(radioBtnPatientInsuranceYes);
        radioBtnPatientInsuranceYes.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        radioBtnPatientInsuranceYes.setText("Yes");
        radioBtnPatientInsuranceYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnPatientInsuranceYesActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioBtnPatientInsuranceNo);
        radioBtnPatientInsuranceNo.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        radioBtnPatientInsuranceNo.setText("No");
        radioBtnPatientInsuranceNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnPatientInsuranceNoActionPerformed(evt);
            }
        });

        lblHavePolicy.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblHavePolicy.setText("Is this patient covered by Insurance");

        lblPolicyName.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblPolicyName.setText("Policy Name :");

        lblInsCompany.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblInsCompany.setText("Insurance Company :");

        btnCreate.setBackground(new java.awt.Color(0, 153, 255));
        btnCreate.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        btnCreate.setText("CREATE");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel34.setText("Reason for Visit:");

        jLabel11.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 14)); // NOI18N
        jLabel11.setText("PATIENT MEDICAL CONDITION");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        lblPolicyNum.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblPolicyNum.setText("Provide Insurance Policy Number:");

        txtPolicyNum.setEnabled(false);

        btnFindInsurance.setBackground(new java.awt.Color(0, 153, 255));
        btnFindInsurance.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        btnFindInsurance.setText("Find Policy");
        btnFindInsurance.setEnabled(false);
        btnFindInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindInsuranceActionPerformed(evt);
            }
        });

        lblCoverage.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblCoverage.setText("Patient Insurance Coverage % :");

        buttonGroup2.add(radioBtnOther);
        radioBtnOther.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        radioBtnOther.setText("Other");

        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jLabel4.setText("Patient ID / Visit ID :");

        btnResetPolicyNum.setBackground(new java.awt.Color(0, 153, 255));
        btnResetPolicyNum.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        btnResetPolicyNum.setText("Reset Policy Number");
        btnResetPolicyNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetPolicyNumActionPerformed(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        txtEmail.setText("Patient Email:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(279, 279, 279)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel25)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(radioBtnFemale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioBtnMale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioBtnOther))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel24)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel8))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel18)
                                .addComponent(jLabel7))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(314, 314, 314)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(261, 261, 261)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblHavePolicy)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(radioBtnPatientInsuranceYes))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(24, 24, 24)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioBtnPatientInsuranceNo))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblInsCompany)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtInsuranceCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblCoverage)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCoverage, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPolicyNum)
                                        .addGap(2, 2, 2)
                                        .addComponent(txtPolicyNum, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnFindInsurance)
                                        .addGap(42, 42, 42))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblPolicyName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnResetPolicyNum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPolicyName)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(179, 179, 179)
                                .addComponent(jLabel34)
                                .addGap(18, 18, 18)
                                .addComponent(txtReasonForVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtPatientSSN)
                                            .addComponent(txtPatientIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(txtHomePhone, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnFindPatient)
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel3))
                                    .addComponent(txtEmail))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPatientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(239, 239, 239)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(275, 275, 275))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(303, 303, 303))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(362, 362, 362))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCoverage, txtDate, txtFirstName, txtHomePhone, txtInsuranceCompany, txtLastName, txtPatientIdentifier, txtPatientSSN, txtPolicyName, txtPolicyNum, txtSSN});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPatientSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFindPatient)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPatientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtEmail))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtPatientIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHomePhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)
                            .addComponent(jLabel17)
                            .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(radioBtnMale)
                            .addComponent(radioBtnFemale)
                            .addComponent(radioBtnOther))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHavePolicy)
                    .addComponent(radioBtnPatientInsuranceYes)
                    .addComponent(radioBtnPatientInsuranceNo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPolicyNum)
                    .addComponent(txtPolicyNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindInsurance)
                    .addComponent(btnResetPolicyNum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPolicyName)
                        .addComponent(txtPolicyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblInsCompany)
                        .addComponent(txtInsuranceCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCoverage)
                    .addComponent(txtCoverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jLabel11)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtReasonForVisit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addGap(37, 37, 37)
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtHomePhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHomePhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHomePhoneActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void radioBtnMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBtnMaleActionPerformed

    private void radioBtnFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnFemaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBtnFemaleActionPerformed

    private void radioBtnPatientInsuranceYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnPatientInsuranceYesActionPerformed
        lblPolicyNum.setEnabled(true);
        btnFindInsurance.setEnabled(true);
        txtPolicyNum.setEnabled(true);

    }//GEN-LAST:event_radioBtnPatientInsuranceYesActionPerformed

    private void radioBtnPatientInsuranceNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnPatientInsuranceNoActionPerformed
        
        lblPolicyNum.setEnabled(false);
        btnFindInsurance.setEnabled(false);
        txtPolicyNum.setEnabled(false);
        txtInsuranceCompany.setEnabled(false);
        txtPolicyName.setEnabled(false);
        
        txtCoverage.setEnabled(false);
        
        lblCoverage.setEnabled(false);
        lblInsCompany.setEnabled(false);
        
        lblPolicyName.setEnabled(false);
    }//GEN-LAST:event_radioBtnPatientInsuranceNoActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        
        if (txtFirstName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide first name");
            return;
        }
        if (txtLastName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide last name");
            return;
        }
        if (buttonGroup2.isSelected(null)) {
            JOptionPane.showMessageDialog(null, "Please select gender");
            return;
        }
        if (txtHomePhone.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide phone");
            return;
        }
        if (txtSSN.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide SSN");
            return;
        }
        if (txtAge.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide age");
            return;
        }
        if (txtAddress.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide address");
            return;
        }
        
        if (buttonGroup1.isSelected(null)) {
            JOptionPane.showMessageDialog(null, "Please choose if Patient covered by Insurance");
            return;
        }
        
        if (txtReasonForVisit.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide Reason for visit");
            return;
            
        }
        if (txtPatientEmail.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide an Email ID");
            return;
            
        }
        if (!usernamePatternCorrect(txtPatientEmail.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Please provide a valid email ID in the format xxxx@xx.xx");
            
        }
        else {
            
            String registrationDate = txtDate.getText().trim();
            
            String firstName = txtFirstName.getText().trim();
            String lastName = txtLastName.getText().trim();
            String gender = "Male";
            if (radioBtnFemale.isSelected()) {
                gender = "Female";
            } else if (radioBtnOther.isSelected()) {
                gender = "Other";
            }
            
            String phoneNo = txtHomePhone.getText().trim();
            
            if (!phonePatternCorrect()) {
                JOptionPane.showMessageDialog(null, "/* Following are valid phone number examples */             \n"
                        + "              \"1234567890\", \"123-456-7890\", \"(123)4567890\", \"(123)456-7890\",\n"
                        + "              /* Following are invalid phone numbers */ \n"
                        + "              \"(1234567890)\",\"123)4567890\", \"12345678901\", \"(1)234567890\",");
                txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.RED));
                
                return;
            }
            
            if (phonePatternCorrect()) {
                txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.GRAY));
                
            }
            
            String ssn = txtSSN.getText().trim();
            
            if (!ssnPatternCheck()) {
                JOptionPane.showMessageDialog(null, "/* United States Social Security numbers are nine-digit numbers in the format AAA-GG-SSSS with following rules. */             \n"
                        + "              \"The first three digits called the area number. The area number cannot be 000, 666, or between 900 and 999\",\n"
                        + "                \" Digits four and five are called the group number and range from 01 to 99\",\n"
                        + "              \"The last four digits are serial numbers from 0001 to 9999.\"");
                txtSSN.setBorder(BorderFactory.createLineBorder(Color.RED));
                
                return;
            }
            
            if (ssnPatternCheck()) {
                txtSSN.setBorder(BorderFactory.createLineBorder(Color.GRAY));
                
            }
            
            String age = txtAge.getText().trim();
            
            try {
                Integer.parseInt(age);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please provide integer values in Age textfield");
                return;
            }
            
            String address = txtAddress.getText().trim();
            boolean hasInsurance = false;
            
            String policyNumber = txtPolicyNum.getText().trim();
            if (radioBtnPatientInsuranceYes.isSelected()) {
                if (policyNumber.equals("")) {
                    JOptionPane.showMessageDialog(null, "Provide policy number");
                    return;
                }
                
                if (txtPolicyName.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "No Policy found, please provide correct policy number");
                    return;
                }
            }
            String insuranceCompany = String.valueOf(txtInsuranceCompany.getText());
            String policyName = String.valueOf(txtPolicyName.getText());
            String coverString = txtCoverage.getText().trim();
            double coverage = coverString.equals("") ? 0 : Double.parseDouble(txtCoverage.getText().trim());
            
            String reasonForVisit = txtReasonForVisit.getText().trim();
            
            if (hasInsurance) {
                if (txtPolicyNum.getText().equals("")) {
                    return;
                }
            }
            
            Insurance insurance = new Insurance(policyName, insuranceCompany, coverage);
            InsuranceCustomer insuranceCustomer = new InsuranceCustomer(policyNumber, insurance);
            
            HealthCenterEnterprise healthCenterEnterprise = (HealthCenterEnterprise) enterprise;
            Patient patient = new Patient();
            
            patient.setAppointmentDate(txtDate.getText());
            patient.setId(patientId);
            patient.setFirstName(firstName);
            patient.setLastName(lastName);
            patient.setGender(gender);
            patient.setEmail(txtPatientEmail.getText().trim());
            
            patient.setContactNumber(phoneNo);
            patient.setAge(age);
            patient.setSsn(ssn);
            patient.setAddress(address);
            
            patient.setInsuranceCustomer(insuranceCustomer);
            
            healthCenterEnterprise.getPatientDirectory().getPatientList().add(patient);
            
            PatientTreatmentWorkRequest patientTreatmentWorkRequest = new PatientTreatmentWorkRequest(registrationDate, reasonForVisit, patient);
            patientTreatmentWorkRequest.setStatus("Waiting for Doctor");
            //   patientTreatmentWorkRequest.setSender(userAccount);

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizations()) {
                if (organization instanceof DoctorOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequests().add(patientTreatmentWorkRequest);
                userAccount.getWorkQueue().getWorkRequests().add(patientTreatmentWorkRequest);
                refresh();
                JOptionPane.showMessageDialog(null, "Patient Registered Successfully");
            }
            
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        AccountantWorkAreaJPanel dwjp = (AccountantWorkAreaJPanel) component;
        dwjp.populateAllPatientsTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnFindPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPatientActionPerformed
        
        boolean isPatientFound = false;
        String ssn = txtPatientSSN.getText().trim();
        List<Network> networks = ecosystem.getNetworks();
        List<HealthCenterEnterprise> healthCenterEnterprises = new ArrayList<>();
        
        for (Network network : networks) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof HealthCenterEnterprise) {
                    healthCenterEnterprises.add((HealthCenterEnterprise) enterprise);
                }
            }
        }
        
        for (HealthCenterEnterprise healthCenterEnterprise : healthCenterEnterprises) {
            List<Patient> patients = healthCenterEnterprise.getPatientDirectory().getPatientList();
            for (Patient patient : patients) {
                if (ssn.equals(patient.getSsn())) {
                    autopopulateFields(patient);
                    isPatientFound = true;
                }
                
            }
        }
        
        if (!isPatientFound) {
            JOptionPane.showMessageDialog(null, "No patient Found");
        }
    }//GEN-LAST:event_btnFindPatientActionPerformed

    private void btnFindInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindInsuranceActionPerformed
        String insurancePolicyNumber = txtPolicyNum.getText().trim();
        String ssn = txtSSN.getText().trim();
        List<InsuranceCompanyEnterprise> insuranceEnterprises = new ArrayList<>();
        InsuranceCustomer matchedCustomer = null;
        
        List<Network> networks = ecosystem.getNetworks();
        for (Network network : networks) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof InsuranceCompanyEnterprise) {
                    insuranceEnterprises.add((InsuranceCompanyEnterprise) enterprise);
                }
            }
        }
        
        for (InsuranceCompanyEnterprise insuranceCompanyEnterprise : insuranceEnterprises) {
            List<InsuranceCustomer> insuranceCustomers = insuranceCompanyEnterprise.getInsuranceCustomerList().getInsuranceHolders();
            for (InsuranceCustomer insuranceCustomer : insuranceCustomers) {
                if (insurancePolicyNumber.equals(insuranceCustomer.getInsurancePolicyNumber()) && ssn.equals(insuranceCustomer.getSocialSecurityID())) {
                    matchedCustomer = insuranceCustomer;
                    
                }
            }
        }
        
        if (matchedCustomer != null) {
            txtInsuranceCompany.setText(matchedCustomer.getInsurance().getInsuranceCompanyName());
            txtPolicyName.setText(matchedCustomer.getInsurance().getPolicyName());
            //  txtPolicyNo.setText(matchedCustomer.getInsurancePolicyNumber());
            txtCoverage.setText(String.valueOf(matchedCustomer.getInsurance().getCoveragepercentage()));
            txtPolicyNum.setEnabled(false);
            txtSSN.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "Policy number does not match with provided SSN");
            txtInsuranceCompany.setText("");
            txtPolicyName.setText("");
            txtCoverage.setText("");
            txtPolicyNum.setText("");
            return;
        }
    }//GEN-LAST:event_btnFindInsuranceActionPerformed

    private void btnResetPolicyNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetPolicyNumActionPerformed
        txtPolicyNum.setEnabled(true);
        txtSSN.setEnabled(true);
        txtPolicyNum.setText("");
        txtPolicyName.setText("");
        txtInsuranceCompany.setText("");
        txtCoverage.setText("");
        

    }//GEN-LAST:event_btnResetPolicyNumActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnFindInsurance;
    private javax.swing.JButton btnFindPatient;
    private javax.swing.JButton btnResetPolicyNum;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCoverage;
    private javax.swing.JLabel lblHavePolicy;
    private javax.swing.JLabel lblInsCompany;
    private javax.swing.JLabel lblPolicyName;
    private javax.swing.JLabel lblPolicyNum;
    private javax.swing.JRadioButton radioBtnFemale;
    private javax.swing.JRadioButton radioBtnMale;
    private javax.swing.JRadioButton radioBtnOther;
    private javax.swing.JRadioButton radioBtnPatientInsuranceNo;
    private javax.swing.JRadioButton radioBtnPatientInsuranceYes;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCoverage;
    private javax.swing.JTextField txtDate;
    private javax.swing.JLabel txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHomePhone;
    private javax.swing.JTextField txtInsuranceCompany;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPatientEmail;
    private javax.swing.JTextField txtPatientId11;
    private javax.swing.JTextField txtPatientIdentifier;
    private javax.swing.JTextField txtPatientSSN;
    private javax.swing.JTextField txtPolicyName;
    private javax.swing.JTextField txtPolicyNum;
    private javax.swing.JTextField txtReasonForVisit;
    private javax.swing.JTextField txtSSN;
    // End of variables declaration//GEN-END:variables

    private void populateField() {
        LocalDateTime localTimeUpdate = LocalDateTime.now();
        DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ss");
        txtDate.setText(localTimeUpdate.format(dateTimeFormat));
        
        txtPatientIdentifier.setText(patientId);
        
        lblPolicyNum.setEnabled(false);
        btnFindInsurance.setEnabled(false);
        txtPolicyNum.setEnabled(false);
        txtInsuranceCompany.setEnabled(false);
        txtPolicyName.setEnabled(false);
        
        txtCoverage.setEnabled(false);
        
        lblCoverage.setEnabled(false);
        lblInsCompany.setEnabled(false);
        
        lblPolicyName.setEnabled(false);
    }
    
    private void refresh() {
        
        txtPatientIdentifier.setText(UUID.randomUUID().toString().substring(0, 7));
        txtFirstName.setText("");
        txtLastName.setText("");
        txtHomePhone.setText("");
        txtAge.setText("");
        txtSSN.setText("");
        txtAddress.setText("");
        txtReasonForVisit.setText("");
        txtPatientEmail.setText("");
        txtPolicyName.setText("");
        txtPolicyNum.setText("");
        txtCoverage.setText("");
        txtInsuranceCompany.setText("");
    }
    
    private boolean phonePatternCorrect() {
        
        Pattern pattern = Pattern.compile("\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}");
        Matcher matcher = pattern.matcher(txtHomePhone.getText());
        
        boolean b = false;
        
        if (matcher.matches()) {
            b = true;
        } else {
            b = false;
        }
        
        return b;
    }
    
    private boolean ssnPatternCheck() {
        
        Pattern pattern = Pattern.compile("^(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$");
        Matcher matcher = pattern.matcher(txtSSN.getText());
        
        boolean b = false;
        
        if (matcher.matches()) {
            b = true;
        } else {
            b = false;
        }
        
        return b;
    }
    
    private void autopopulateFields(Patient patient) {
        txtFirstName.setText(patient.getFirstName());
        txtLastName.setText(patient.getLastName());
        txtPatientIdentifier.setText(patient.getId());
        txtHomePhone.setText(patient.getContactNumber());
        txtSSN.setText(patient.getSsn());
        txtAge.setText(patient.getAge());
        txtAddress.setText(patient.getAddress());
        txtPatientEmail.setText(patient.getEmail());
        
        String sex = patient.getGender();
        
        if (sex.equals("Male")) {
            radioBtnMale.setSelected(true);
        } else if (sex.equals("Female")) {
            radioBtnFemale.setSelected(true);
        } else if (sex.equals("Other")) {
            radioBtnOther.setSelected(true);
        }
        
    }
    
    private boolean usernamePatternCorrect(String username) {
        Pattern p = Pattern.compile("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$");
        Matcher m = p.matcher(username);
        boolean b = m.matches();
        return b;
        
    }
    
    private boolean checkEmailDuplication(String patientEmail){
             boolean isPatientFound = false;
        String ssn = txtPatientSSN.getText().trim();
        List<Network> networks = ecosystem.getNetworks();
        List<HealthCenterEnterprise> healthCenterEnterprises = new ArrayList<>();
        
        for (Network network : networks) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof HealthCenterEnterprise) {
                    healthCenterEnterprises.add((HealthCenterEnterprise) enterprise);
                }
            }
        }
        
        for (HealthCenterEnterprise healthCenterEnterprise : healthCenterEnterprises) {
            List<Patient> patients = healthCenterEnterprise.getPatientDirectory().getPatientList();
            for (Patient patient : patients) {
                if (patientEmail.equals(patient.getEmail())) {
                    isPatientFound = true;
                    break;
                }
                
            }
        }
        return isPatientFound;
    }
}
