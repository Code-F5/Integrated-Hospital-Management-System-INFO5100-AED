/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.regex.*;

/**
 *
 * @author Dell
 */
public class ManageUserAccountJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserAccountJPanel
     */
    private JPanel container;
    private Enterprise enterprise;

    public ManageUserAccountJPanel(JPanel container, Enterprise enterprise) {
        initComponents();
        this.enterprise = enterprise;
        this.container = container;

        popOrganizationComboBox();
        popData();
    }

    public void popOrganizationComboBox() {
        cborganization.removeAllItems();

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizations()) {
            if (!(organization instanceof PatientOrganization)) {
                cborganization.addItem(organization);
            }
        }
    }

    public void populateEmployeeComboBox(Organization organization) {
        cbEmployee.removeAllItems();

        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
            cbEmployee.addItem(employee);
        }
    }

    private void populateRoleComboBox(Organization organization) {
        cbRole.removeAllItems();
        for (Role role : organization.getSupportedRole()) {
            cbRole.addItem(role);
        }
    }

    public void popData() {

        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizations()) {
            for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                Object row[] = new Object[2];
                row[0] = ua;
                row[1] = ua.getRole();
                ((DefaultTableModel) tblUser.getModel()).addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createUserJButton = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        lblPassword = new javax.swing.JLabel();
        lblEmployee = new javax.swing.JLabel();
        cbEmployee = new javax.swing.JComboBox();
        btnBack = new javax.swing.JButton();
        lblOrgnization = new javax.swing.JLabel();
        cborganization = new javax.swing.JComboBox();
        lblRole = new javax.swing.JLabel();
        cbRole = new javax.swing.JComboBox();
        txtPassword = new javax.swing.JPasswordField();
        lblValidatePassword = new javax.swing.JLabel();
        txtPasswordConfirm = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        lblManageAccountImage = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        createUserJButton.setBackground(new java.awt.Color(0, 153, 255));
        createUserJButton.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        createUserJButton.setText("Create");
        createUserJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserJButtonActionPerformed(evt);
            }
        });

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblUsername.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblUsername.setText("User Name");

        tblUser.setBackground(new java.awt.Color(204, 204, 255));
        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUser);
        if (tblUser.getColumnModel().getColumnCount() > 0) {
            tblUser.getColumnModel().getColumn(0).setResizable(false);
            tblUser.getColumnModel().getColumn(1).setResizable(false);
        }

        lblPassword.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblPassword.setText("Password");

        lblEmployee.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblEmployee.setText("Employee");

        cbEmployee.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnBack.setBackground(new java.awt.Color(102, 153, 255));
        btnBack.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblOrgnization.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblOrgnization.setText("Organization");

        cborganization.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cborganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cborganizationActionPerformed(evt);
            }
        });

        lblRole.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblRole.setText("Role");

        cbRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPasswordKeyReleased(evt);
            }
        });

        lblValidatePassword.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        lblValidatePassword.setText("re-enter Password");

        txtPasswordConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordConfirmActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 0, 51));
        jLabel7.setText("Manage User Account");

        lblManageAccountImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/user-gif-4.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)
                        .addGap(195, 195, 195)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblValidatePassword)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblManageAccountImage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEmployee, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblOrgnization, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblRole, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblUsername, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPassword, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cborganization, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(createUserJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(lblOrgnization))
                            .addComponent(cborganization, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbEmployee)
                            .addComponent(lblEmployee))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbRole)
                            .addComponent(lblRole))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(lblUsername))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPassword)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblManageAccountImage, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValidatePassword))
                .addGap(30, 30, 30)
                .addComponent(createUserJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(204, 204, 204))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createUserJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserJButtonActionPerformed
        String userName = txtName.getText();
        String password = String.valueOf(txtPassword.getPassword());
        String rePassword = String.valueOf(txtPasswordConfirm.getPassword());
        Organization organization = (Organization) cborganization.getSelectedItem();
        Employee employee = (Employee) cbEmployee.getSelectedItem();
        Role role = (Role) cbRole.getSelectedItem();
            
        if (userName.trim().isEmpty() || password.trim().isEmpty())
        {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Username and Password cannot be empty");
        } else if  (!password.equals(rePassword)) {
            JOptionPane.showMessageDialog(null, "Passwords don't match");
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtPasswordConfirm.setBorder(BorderFactory.createLineBorder(Color.RED));
            return;
        }
        else {
            List<UserAccount> userAccountList = organization.getUserAccountDirectory().getUserAccountList();
            for (UserAccount userAccount : userAccountList) {
                if (userAccount.getUsername().equals(userName)) {
                    JOptionPane.showMessageDialog(null, "username already taken!!");
                    txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
                    return;
                }
                
        }
            organization.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
            popData();
            txtName.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtPasswordConfirm.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtPassword.setText("");
            txtPasswordConfirm.setText("");
            txtName.setText("");
        }
            
        
                    
                    
                    
                    
                    
                    
//        if (userName == null || userName.equals("")) {
//            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
//            JOptionPane.showMessageDialog(null, "Username cannot be empty");
//            return;
//        }
//
//        if (password == null || password.equals("")) {
//            txtName.setBorder(BorderFactory.createLineBorder(Color.BLACK));
//            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
//            JOptionPane.showMessageDialog(null, "Password cannot be empty");
//            return;
//        }
//
//        if (!passwordPatternValidation()) {
//            JOptionPane.showMessageDialog(null, "Password should be at least 6 Characters "
//                    + "digits and a combination of number , uppercase letter, "
//                    + "lowercase letter and Special characters are not allowed other than $, +, _");
//            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
//            return;
//        }
//
//        if (!password.equals(rePassword)) {
//            JOptionPane.showMessageDialog(null, "Passwords don't match");
//            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
//            txtPasswordConfirm.setBorder(BorderFactory.createLineBorder(Color.RED));
//            return;
//        } else {
//
//            List<UserAccount> userAccountList = organization.getUserAccountDirectory().getUserAccountList();
//            for (UserAccount userAccount : userAccountList) {
//                if (userAccount.getUsername().equals(userName)) {
//                    JOptionPane.showMessageDialog(null, "username already taken!!");
//                    txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
//                    return;
//                }
//            }
//
//            organization.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
//            popData();
//            txtName.setBorder(BorderFactory.createLineBorder(Color.BLACK));
//            txtPassword.setBorder(BorderFactory.createLineBorder(Color.BLACK));
//            txtPasswordConfirm.setBorder(BorderFactory.createLineBorder(Color.BLACK));
//            txtPassword.setText("");
//            txtPasswordConfirm.setText("");
//            txtName.setText("");
//        }
    }//GEN-LAST:event_createUserJButtonActionPerformed

    private boolean passwordPatternValidation() {
        Pattern p = Pattern.compile( "^(?=.*[0-9])"
                       + "(?=.*[a-z])(?=.*[A-Z])"
                       + "(?=.*[@#$%^&+=])"
                       + "(?=\\S+$).{5,20}$");
        Matcher m = p.matcher(String.valueOf(txtPassword.getPassword()));
        return m.matches();
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cborganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cborganizationActionPerformed
        Organization organization = (Organization) cborganization.getSelectedItem();
        if (organization != null) {
            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
        }
    }//GEN-LAST:event_cborganizationActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtPasswordConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordConfirmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordConfirmActionPerformed

    private void txtPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyReleased
        // TODO add your handling code here:
        if (!passwordPatternValidation()) {
            JOptionPane.showMessageDialog(null, "It contains at least 5 characters and at most 20 characters.\n" +
                                 "It contains at least one digit.\n" +
                                 "It contains at least one upper case alphabet.\n" +
                                 "It contains at least one lower case alphabet.\n" +
                                 "It contains at least one special character which includes !@#$%&*()-+=^.\n" +
                                 "It doesn’t contain any white space.");
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            return;
        }
    
        
        
    }//GEN-LAST:event_txtPasswordKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox cbEmployee;
    private javax.swing.JComboBox cbRole;
    private javax.swing.JComboBox cborganization;
    private javax.swing.JButton createUserJButton;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmployee;
    private javax.swing.JLabel lblManageAccountImage;
    private javax.swing.JLabel lblOrgnization;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblValidatePassword;
    private javax.swing.JTable tblUser;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPasswordConfirm;
    // End of variables declaration//GEN-END:variables
}
